import { useAuth } from "@/components/AuthContext";
import AsyncStorage from "@react-native-async-storage/async-storage";
import React, { useState } from "react";
import { View, Text, TextInput, Button, StyleSheet } from "react-native";

const AddPlantForm = () => {
  const [plantName, setPlantName] = useState("");
  const [plantLastWatered, setPlantLastWatered] = useState("");
  const [plantDatePlanted, setPlantDatePlanted] = useState("");
  const { userId } = useAuth();
  const apiUrl = process.env.EXPO_PUBLIC_API;
  const handleSubmit = async () => {
    const plantData = {
      plant: {
        Id: "1",
        Name: plantName, // Generally, the ID would not be set here; it should be autogenerated by the backend
        KnowledgeBaseId:"" , // Set this if needed or get from another part of your form
        LastWatered: plantLastWatered,
        DatePlanted: plantDatePlanted,
      },
    };

    try {
      console.log(userId);
      console.log(plantData);
      const response = await fetch(`${apiUrl}/api/gardens/${userId}/plants`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${await AsyncStorage.getItem("jwtToken")}`, // Ensure the token is retrieved correctly
        },

        body: JSON.stringify({
          Id: "1",
          Name: plantName,
          KnowledgeBaseId: "",
          LastWatered: plantLastWatered,
          DatePlanted: plantDatePlanted,
        }),
      });

      const responseData = await response.json();
      if (response.ok) {
        console.log("Plant added successfully:", responseData);
        // Additional actions upon success e.g., navigation, alert, etc.
      } else {
        console.error("Failed to add plant:", responseData);
        // Handle errors, e.g., show an error message
      }
    } catch (error) {
      console.error("An error occurred while adding the plant:", error);
      // Handle the error e.g., show an error message
    }
  };

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Add New Plant</Text>
      <TextInput
        style={styles.input}
        placeholder="Plant Name"
        value={plantName}
        onChangeText={setPlantName}
      />
      <TextInput
        style={styles.input}
        placeholder="Last Watered (yyyy-mm-dd)"
        value={plantLastWatered}
        onChangeText={setPlantLastWatered}
      />
      <TextInput
        style={styles.input}
        placeholder="Date Planted (yyyy-mm-dd)"
        value={plantDatePlanted}
        onChangeText={setPlantDatePlanted}
      />
      <Button title="Submit Plant" onPress={handleSubmit} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 16,
    backgroundColor: "#fff",
  },
  title: {
    fontSize: 20,
    fontWeight: "bold",
    marginBottom: 20,
  },
  input: {
    height: 40,
    marginBottom: 12,
    borderWidth: 1,
    padding: 10,
  },
});

export default AddPlantForm;
